async function init() {
    canvas = document.getElementById('canvas');
    level = await getlevel1();
    world = new World(canvas, keyboard, level);
    unMute()
    if (world.level.isStarted === true) {
        location.reload()
    }

    overlayimgsjunglediff = document.getElementById("overlayimgsjunglediff")
    playbnt = document.getElementById("playbnt")
    
    overlayimgsjunglediff.appendChild(playbnt);
    playbnt.className = "overlaybnts"

    world.level.isStarted = true;
    world.keyboard.isInactive()
    world.keyboard.isActive()
    world.keyboard.measureTime()
    console.log('My Character is', world.character);
}
//////////////////////////////////////

character = new Character();
    canvas;
    ctx;
    level;
    keyboard;
    camera_x = 0;
    gameover = new Gameover();
    statusBarHEALTH = new StatusBarHEALTH();
    statusBarHEALTHENDBOSS = new StatusBarHEALTHENDBOSS();
    statusBarBOTTLE = new StatusBarBOTTLE();
    statusBarCOIN = new StatusBarCOIN();
    throwableObjects = [];
    isStarted = false
    endboss = this.level.enemies.length - 1
    startLastThrowTimer = 1;
    timeSinceLastThrow;
    timeSinceLastThrowInSec;

    damage_sound = new Audio('audio/damage.mp3')

    constructor(canvas, keyboard, level) {
        this.ctx = canvas.getContext('2d');
        this.level = level
        this.canvas = canvas;
        this.keyboard = keyboard;
        this.draw();
        this.setWorld();
        this.run();
        setInterval(() => {
            if (this.keyboard.D) {
                this.timeSinceLastThrow = Date.now() - this.startLastThrowTimer;
                this.timeSinceLastThrowInSec = this.timeSinceLastThrow / 1000
            }
        }, 100);
    }